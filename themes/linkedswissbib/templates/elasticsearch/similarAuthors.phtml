<?
$instances = array();
$basePath = $this->basePath();

$results = $this->results->getResults();
foreach ($results as $singleResult):
    if ($singleResult->isPerson()) {
        $person_uniqueId = $singleResult->getUniqueID();
    } else
        $instances[] = $singleResult;
endforeach;
?>

<script>

    $(function() {
        //persons only! no organisations!
        function getCoAuthors(result) {
            var array = result.person;
            if (typeof array !== 'undefined') {
                if ($.isArray(array)) {
                    var result = "";
                    for (var key in array) {
                        //get name
                        var names = array[key]._source;
                        var person = names['rdf:type'];

                        if (person == 'http://xmlns.com/foaf/0.1/Person') {
                            if (('foaf:lastName' in names) && ('foaf:firstName') in names) {
                                var name = names['foaf:firstName'] + ' ' + names['foaf:lastName'];
                            } else if ('foaf:lastName' in names) {
                                var name = names['foaf:lastName'];
                            } else if ('foaf:name' in names) {
                                var name = names['foaf:name'];
                            } else {
                                var name = 'no content provided';
                            }

                            //get thumbnail or dummy image TODO: CSS loads correctly only after reload --> Why?
                            var thumbnail = getValueIfAvailable(array[key]._source['dbp:thumbnail'], "../themes/linkedswissbib/images/personAvatar.png");

                            //get person's id
                            var person_id = array[key]._source['@id'];

                            // create <li>
                            result += '<li><a href="http://' + window.location.hostname +
                            '/sbrd/Exploration/AuthorDetails?lookfor=' + person_id + '&type=AuthorForId"><figure><img class="thumbnail" src=" ' + thumbnail + ' " alt=" ' + name + ' "><figcaption>' + name + ' ' + '</a>';
                            result += '<span class="fa fa-info-circle fa-lg kcopener" authorId="' + person_id +'"></span></figcaption></figure></li>';
                        }
                    }
                }
            } else {
                var result = "no content provided";
            }
            if (!result) {
                result = "no content provided";
            } else {
                result;
            }
            return result;
        }

        //substring experiment - doesn't work...
/*        function getBibliographicResourceWithSameTopics(result) {
            var array = result.bibliographicResource;
            if (typeof array !== 'undefined') {
                if ($.isArray(array)) {
                    var result = "";
                    for (var key in array) {
                        //check if substring (subjects) are contained in string
                        //var string_subjects = string;
                        //var string_subjects = string_subjects.split(",");
                        var substring_subjects = array[key]._source['dct:subject'];
                        if (typeof substring_subjects !== 'undefined'){

                            //var substring_subjects = array[key]._source['dct:subject'];
                            //var substring_subjects = substring_subjects.split(",");

                            //(string_subjects.indexOf(substring_subjects) > -1)
                            var title = substring_subjects['dct:title']
                            var bibliographicResource_id = array[key]._source['@id'];
                            var id_classic = bibliographicResource_id.slice(33);

                            // create <li>
                            result += '<li><a href="http://' + window.location.hostname +
                            '/sbrd/Record/' + id_classic + '"><span>' + title +'</span></li>';
                        }
                    }
                }
            } else {
                var result = "no content provided";
            }
            if (!result) {
                result = "no content provided";
            } else {
                result;
            }
            return result;
        }*/

        function getBibliographicResourceWithSimilarTopics(result) {
            var array = result.bibliographicResource;
            if (typeof array !== 'undefined') {
                if ($.isArray(array)) {
                    var result = "";
                    for (var key in array) {
                        //get title
                        var names = array[key]._source;
                        var title = names['dct:title'];

                        //get bibRes's id
                        var bibliographicResource_id = array[key]._source['@id'];
                        //extract ID to link to the Solr record
                        var id_classic = bibliographicResource_id.slice(33);

                        // create <li> that links to the Solr record
                        result += '<li><a href="http://' + window.location.hostname +
                        '/sbrd/Record/' + id_classic + '"><span>' + title +'</span></li>';
                    }
                }
            } else {
                var result = "no content provided";
            }
            if (!result) {
                result = "no content provided";
            } else {
                result;
            }
            return result;
        }

        //Backup
/*        function getSubjects(result) {
            var bibRes = result.bibliographicResource;
            if (typeof bibRes !== 'undefined') {
                if ($.isArray(bibRes)) {
                    var subject = "";
                    for (var key in bibRes) {
                        subject += bibRes[key]._source['dct:subject'] + ",";
                        subject = subject.replace('undefined,','');
                    }
                    var subject = subject.substring(0, subject.length - 1);
                }
            } else {
                var subject = "";
            }

            return subject;
        }*/

        //get IDs for POST
        function getIdsBibRes(result) {
            // get IDs from bibliographicResource
            var bibRes = result.bibliographicResource;
            if (typeof bibRes !== 'undefined') {
                if ($.isArray(bibRes)) {
                    var id_bibRes = "";
                    for (var key in bibRes) {
                        id_bibRes += bibRes[key]._source['@id'] + ",";
                    }
                    var id_bibRes = id_bibRes.substring(0, id_bibRes.length - 1);
                }
            } else {
                var id_bibRes = "";
            }
            return id_bibRes;
        }

        function getIdsContributorFromBibRes(result) {
            // get IDs from bibliographicResource
            var bibRes = result.bibliographicResource;
            if (typeof bibRes !== 'undefined') {
                if ($.isArray(bibRes)) {
                    var id_contributorFromBibRes = "";
                    for (var key in bibRes) {
                        id_contributorFromBibRes += bibRes[key]._source['dct:contributor'] + ",";
                    }
                    var id_contributorFromBibRes = id_contributorFromBibRes.substring(0, id_contributorFromBibRes.length - 1);
                }
            } else {
                var id_contributorFromBibRes = "";
            }
            return id_contributorFromBibRes;
        }

        function getIdsSubject (result) {
            // get IDs from subject
            var bibRes = result.bibliographicResource;
            if (typeof bibRes !== 'undefined') {
                if ($.isArray(bibRes)) {
                    var subject = "";
                    for (var key in bibRes) {
                        subject += bibRes[key]._source['dct:subject'] + ",";
                        subject = subject.replace('undefined,','');
                    }
                    var subject = subject.substring(0, subject.length - 1);
                }
            } else {
                var subject = "";
            }
            return subject;
        }

        function getIdsPerson (result) {
            // get IDs from person
            var person = result.person;
            if (typeof person !== 'undefined') {
                if ($.isArray(person)) {
                    var id_person = "";
                    for (var key in person) {
                        id_person += person[key]._source['@id'] + ",";
                    }
                    var id_person = id_person.substring(0, id_person.length - 1);
                }
            } else {
                var id_person = "";
            }
            return id_person;
        }

        //Here only used for thumbnails
        function getValueIfAvailable(lookup, fallback) {
            if (typeof lookup !== 'undefined') {
                if ($.isArray(lookup)) {
                    return lookup[0];
                } else {
                    return lookup;
                }
            } else {
                return fallback;
            }
        }

        //Count occurrences of subjects for tag cloud
        function occurrences(string, substring){
            var n=0;
            var pos=0;

            while(true){
                pos=string.indexOf(substring,pos);
                if(pos!=-1){ n++; pos+=substring.length;}
                else{break;}
            }
            return(n);
        }

        function getSubjectsPreferredNameArray (data, subjects) {
            var array = data.DEFAULT;
            if (typeof array !== 'undefined') {
                if ($.isArray(array)) {
                    var result = [];
                    for (var key in array) {
                        //var link = '<span class="fa fa-info-circle fa-lg kcopener"></span>';
                        var tag = array[key]._source['http://d-nb_info/standards/elementset/gnd#preferredNameForTheSubjectHeading'][0]['@value'];
                        var id = array[key]._source['@id'];
                        var count = occurrences(subjects, id);
                        var link = 'http://' + window.location.hostname +
                            '/sbrd/Exploration/SubjectDetails?lookfor=' + id + '&type=SubjectById';
                        result.push({counts: count, tag: tag, href: link})
                    }
                }
            } else {
                var result = "no content provided";
            }

            if (!result) {
                result = "no content provided";
            } else {
                result;
            }
            return result;
        }

        //Carousel
        function getCoverLink (array, key) {
            var fallback = "../themes/linkedswissbib/images/icon_no_image_available.gif";
            //get isbn
            if ("bibo:isbn10" in array[key]._source) {
                var isbn10 = array[key]._source['bibo:isbn10'];
                if (typeof isbn10 !== 'undefined') {
                    var url_start = 'https://resources.swissbib.ch/Cover/Show?isn=';
                    var url_end = '&size=large';
                    var link_cover = url_start + isbn10 + url_end;
                } else {
                    var link_cover = fallback;
                }
            } else {
                var link_cover = fallback;
            }
            return link_cover;
        }


        function getBibResLink (array, key) {
            //get ID
            var bibliographicResource_id = array[key]._source['@id'];
            //extract ID to link to the Solr record
            var id_classic = bibliographicResource_id.slice(33);
            var url_start = 'http://' + window.location.hostname +
                '/sbrd/Record/';
            var link_bibRes = url_start + id_classic;
            return link_bibRes;
        }

        //TODO: Find better fallback solution
        //splits bibRes four carousel into four covers per carousel slider
        function getItemForCarousel (array, keyStart, keyEnd){
            var result = "";
            var fallbackItem = "";
            if (array.length >= keyEnd) {
                for (var key = keyStart; key <= keyEnd; key++) {
                    //get cover
                    var link_cover = getCoverLink(array, key);
                    //get link to holding
                    var link_bibRes = getBibResLink (array, key);
                    //get title
                    var bibResTitle = array[key]._source['dct:title'];

                    result += '<div class="col-sm-3"><a href="' + link_bibRes + '" class="hover-overlay" style="max-height: 200px;"><img title="'+ bibResTitle +'" src="' + link_cover + '" style="max-height: 200px;"><div class="content"><b>' + bibResTitle +'</b></div></a></div>';
                }
            } else {
                fallbackItem = '<div class="col-sm-3"><a href="/Record/335357466" class="hover-overlay" style="max-height: 200px;"> <img title="Selfish : poems"src="https://resources.swissbib.ch/Cover/Show?isn=1555977081&size=large" style="max-height: 200px;"> <div class="content"></div></a>';
                var result= fallbackItem;
            }
            return result;
        }

        //gets bibRes for items for slider in carousel
        function getBibResForCarousel (data) {
            var array = data.bibliographicResource;
            if (typeof array !== 'undefined') {
                if ($.isArray(array)) {
                    var item0 = getItemForCarousel(array,1, 4);
                    var item1 = getItemForCarousel(array,5, 8);
                    var item2 = getItemForCarousel(array,9, 12);
                }
                result = [item0, item1, item2];
            } else {
                var result = "no content provided";
            }
            if (!result) {
                result = "no content provided";
            } else {
                result;
            }
            return result;
        }

        var person_uniqueId = "<? echo $person_uniqueId?>";

        $.getJSON('http://193.5.58.96/sbrd/Ajax/Json?lookfor=' + person_uniqueId + '&method=getAuthor&searcher=Elasticsearch', function(data) {
            //console.log(data);

            var idBibRes = getIdsBibRes(data);
            //console.log(idBibRes);
            var idContributorFromBibRes = getIdsContributorFromBibRes(data);
            //console.log(idContributorFromBibRes);
            var idSubject = getIdsSubject(data);
            //console.log(idSubject);
            var idPerson = getIdsPerson(data);
            //console.log(idPerson);

            //idPerson (main author) not included
            var ids = idBibRes + ',' + idContributorFromBibRes + ',' + idSubject;
            //console.log(ids);

            var kc_bibRes = getBibResForCarousel(data);
            //get items for carousel
            var item0 = kc_bibRes[0];
            var item1 = kc_bibRes[1];
            var item2 = kc_bibRes[2];

            $('.kc_item0').after(item0);
            $('.kc_item1').after(item1);
            $('.kc_item2').after(item2);

            $.ajax({
                url: "http://193.5.58.96/sbrd/Ajax/Json?method=getAuthorMulti&searcher=Elasticsearch",
                type: "POST",
                data: {"lookfor": ids},
                success: function (result) {
                    // Zugriff auf JSON über "result"
                    //console.log(result);

                   //Limited to 10 results (ES default)
                    var sA_coauthors = getCoAuthors(result);
                    //console.log(sA_coauthors);

                    var subjects = getIdsSubject (result);
                    //console.log(subjects);

                    $(".sA_coauthors").after(sA_coauthors);

                    $.ajax({
                        url: "http://193.5.58.96/sbrd/Ajax/Json?method=getAuthorMulti&searcher=Elasticsearch",
                        type: "POST",
                        data: {"lookfor": subjects},
                        success: function (result) {
                            // Zugriff auf JSON über "result"

                            var sA_bibliographicResourcesWithSimilarTopics = getBibliographicResourceWithSimilarTopics (result);
                            //(console.log(sA_bibliographicResourcesWithSimilarTopics);

                            var idsContributorFromBibRes = getIdsContributorFromBibRes(result);

                            $(".sA_bibliographicResourcesWithSimilarTopics").after(sA_bibliographicResourcesWithSimilarTopics);

                            $.ajax({
                                url: "http://193.5.58.96/sbrd/Ajax/Json?&method=getSubjectMulti&searcher=Elasticsearch",
                                type: "POST",
                                data: {"lookfor": subjects},
                                success: function (result) {
                                    // Zugriff auf JSON über "result"
                                    //console.log(result);

                                    var tags = getSubjectsPreferredNameArray(result, subjects);
                                    console.log(tags);

                                    $("#main").hotag({
                                        tags: tags,
                                        containerClass: 'hotag'
                                    });
                                },
                                error: function (e) {
                                    console.log(e);
                                }
                            });

                            $.ajax({
                                url: "http://193.5.58.96/sbrd/Ajax/Json?method=getAuthorMulti&searcher=Elasticsearch",
                                type: "POST",
                                data: {"lookfor": idsContributorFromBibRes},
                                success: function (result) {
                                    // Zugriff auf JSON über "result"

                                    var sA_coauthorsOfBibliographicResourcesWithSimilarTopics = getCoAuthors(result);
                                    //console.log(sA_coauthorsOfBibliographicResourcesWithSimilarTopics);

                                    $(".sA_coauthorsOfBibliographicResourcesWithSimilarTopics").after(sA_coauthorsOfBibliographicResourcesWithSimilarTopics);
                                },
                                error: function (e) {
                                    console.log(e);
                                }
                            });
                        },
                        error: function (e) {
                            console.log(e);
                        }
                    });
                },
                error: function (e) {
                    console.log(e);
                }
            });
        });
    });

</script>
<!-- SEGMENT Werke von Zeitgenossen -->
<div id="worksOfContemporaries" class="results-top row">
    <h2>Werke von Zeitgenossen</h2>
</div>
<!-- end class results-top row -->
<div class="row">
    <div data-ride="carousel" class="carousel slide" id="similar-items-carousel">

        <!-- Indicators -->
        <ol class="carousel-indicators">
            <li class="active" data-slide-to="0" data-target="#similar-items-carousel"></li>
            <li data-slide-to="1" data-target="#similar-items-carousel"></li>
            <li data-slide-to="2" data-target="#similar-items-carousel"></li>
        </ol>

        <!-- Wrapper for slides -->
        <div class="carousel-inner">
            <div class="item active">
                <div class="row">
                    <div class="kc_item0"></div>
                </div>
            </div>

            <div class="item">
                <div class="row">
                    <div class="kc_item1"></div>
                </div>
            </div>

            <div class="item">
                <div class="row">
                    <div class="kc_item2"></div>
                </div>
            </div>
        </div>
        <!-- end class carousel-inner -->
        <!-- Controls -->
        <a data-slide="prev" role="button" href="#similar-items-carousel"
           class="left carousel-control">
            <span class="fa fa-chevron-left glyphicon-chevron-left"></span>
        </a>
        <a data-slide="next" role="button" href="#similar-items-carousel"
           class="right carousel-control">
            <span class="fa fa-chevron-right glyphicon-chevron-right"></span>
        </a>

    </div>
    <!-- end class carousel slide -->
</div>
<!-- end row -->

<!-- SEGMENT Verwandte Themen -->
<div id="relatedTopics" class="results-top row">
    <h2>Verwandte Themen</h2>
</div>
<!-- end class results-top row -->
<div class="row">
    <div id="main" class="hotag"></div>
    <!-- Link causes problems if placed at page's head -->
    <script src="../themes/linkedswissbib/js/jquery.hotag.js"></script>

</div>
<!-- end class row -->


<!-- SEGMENT Autoren und Beitragende gemeinsamer Werke -->
<div id="authorsOfCommonWorks" class="results-top row">
    <h2>Autoren und Beitragende gemeinsamer Werke</h2>
</div>
<!-- end class results-top row -->
<div class="row">
    <span id="list"></span>
    <ul class="list-inline">
        <span class="sA_coauthors"></span>
    </ul>
</div>
<!-- end class row -->

<!-- SEGMENT Werke mit ähnlichen Themen -->
<div id="bibliographicResourcesWithSimilarTopics" class="results-top row">
    <h2>Literatur und Medien mit ähnlichen Themen</h2>
</div>
<!-- end class results-top row -->
<div class="row">
    <span id="list"></span>
    <ul class="list-inline">
        <span class="sA_bibliographicResourcesWithSimilarTopics"></span>
    </ul>
</div>
<!-- end class row -->

<!-- SEGMENT Autoren mit ähnlichen Themen -->
<div id="authorsWithSimilarTopics" class="results-top row">
    <h2>Autoren mit ähnlichen Themen</h2>
</div>
<!-- end class results-top row -->
<div class="row">
<span id="list"></span>
    <ul class="list-inline">
        <span class="sA_coauthorsOfBibliographicResourcesWithSimilarTopics"></span>
    </ul>
</div>
<!-- end class row -->

